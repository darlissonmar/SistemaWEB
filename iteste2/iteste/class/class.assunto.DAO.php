<?php require_once("class.DAO.php");class AssuntoDAO extends DAO {	public function gravaDadosAssunto(Assunto $assunto){		$banco = $this->getBancoDados();		 		$sincroniza = "";				$query = "	SELECT count(*) AS total					FROM tb_assunto_and_tb_disciplina					WHERE tb_assunto_id IN (						SELECT tb_assunto_id						FROM tb_assunto						WHERE tb_assunto_nome LIKE '".$assunto->getNome()."')						AND tb_disciplina_id = '$assunto->tmpIdDisciplina'";				if (strlen($assunto->getId())>0){			$query .= " AND   tb_assunto_id   <> ".$assunto->getId();		}				$retorno = $banco->executaSQL($query); 		if ($banco->numRows($retorno) == 0){			throw new Exception("Erro inesperado ao salvar informações do Assunto. Tente novamente.",0);	}		$linha = $banco->fetchArray($retorno); 		if ($linha['total'] > 0){			throw new Exception("Já existe uma assunto com esse nome para essa Disciplina. Operação sem sucesso",0);		}		if (($assunto->getId()) > 0){			$query = " UPDATE tb_assunto						SET tb_assunto_nome  = $assunto->tmpNome						WHERE tb_assunto_id  = ".$assunto->getId()."";						$sincroniza .= " UPDATE tb_assunto_and_tb_disciplina							SET tb_disciplina_id = $assunto->tmpIdDisciplina							WHERE tb_assunto_id  = ".$assunto->getId()."";																}else{			$query = "INSERT INTO tb_assunto (							tb_user_id,							tb_assunto_nome					) VALUE (							$assunto->tmpUsuario,							$assunto->tmpNome							)";										$sincroniza .= " INSERT INTO 							tb_assunto_and_tb_disciplina							(							tb_assunto_id,							tb_disciplina_id							)VALUES (							LAST_INSERT_ID(),							$assunto->tmpIdDisciplina)";									}		if(!$banco->atualizaSQL($query)) {			throw new Exception("Erro ao atualizar / inserir Assunto. ($query) ".$banco->mysql_error()); 		}				if(!$banco->executaSQL($sincroniza)) {			throw new Exception("Erro ao sincronizar assunto e disciplina. ($sincroniza) "); 			}	}//================================================================================	public function recuperarAssunto($id_assunto){		$query ="SELECT tb_assunto.tb_assunto_nome    	AS assunto,						tb_assunto.tb_user_id        	AS usuario,						tb_assunto.tb_assunto_data_cad   AS data				FROM tb_assunto				WHERE tb_assunto.tb_assunto_id = $id_assunto ";		$banco = $this->getBancoDados(); 		$assunto = NULL; 		$retorno = $banco->executaSQL($query); 				if($retorno != NULL) {			if ($banco->numRows($retorno) == 0){				throw new Exception("Nenhuma assunto encontrada.",0);			}			while($linha = $banco->fetchArray($retorno)) { 				$assunto = new Assunto(); 				$assunto->setId($id_assunto);				$assunto->setNome($linha['assunto']);				$assunto->setUsuario($linha["usuario"]);				$assunto->setData($linha["data"]);			}									return $assunto; 		} else {			throw new Exception("Erro ao recuperar o Assunto ($query)"); 		}	}//================================================================================	public function recuperarTodos() {		$banco = $this->getBancoDados(); 		$sql = "SELECT tb_assunto_id				FROM tb_assunto 				ORDER BY tb_assunto_nome ASC"; 		$retorno = $banco->executaSQL($sql);		if($retorno != NULL) {			$assunto = NULL;			$i = "0";			if ($banco->numRows($retorno) == 0 ){				throw new Exception("Nenhum Assunto cadastrado. Para realizar esta operação, acesse o Menu cadastro / Assunto.",0);			}			while($linha = mysql_fetch_array($retorno)) {				$assuntos[$i++] = $this->recuperarAssunto($linha["tb_assunto_id"]);			}			return $assuntos;		} else {			throw new Exception("Erro em query da recuperação de todos os assuntos. ($sql)"); 		}	}//================================================================================	public function recuperarQtde() {		$banco = $this->getBancoDados(); 		$sql = "SELECT count(*) AS qtde				FROM tb_assunto";				$retorno = $banco->executaSQL($sql);		if($retorno != NULL) {			$linha = mysql_fetch_array($retorno);			return $linha['qtde'];		} else {			throw new Exception("Erro em query da recuperação da qtde do assunto"); 		}	}	//================================================================================	public function excluirAssuntoDAO($assunto_id){		$banco = $this->getBancoDados(); 		$query = " DELETE FROM tb_assunto					WHERE tb_assunto_id = ".$assunto_id;				if(!$banco->executaSQL($query)) {			throw new Exception("Erro ao excluir o assunto. (".$banco->mysql_error().")"); 			}	}		}?>